#!/usr/bin/env node
var fs = require('fs');
var async = require('async');
var dynamostore = require('../lib/dynamostore');
var logger = require('logule');
var program = require('commander');

var store = dynamostore({ logger: logger });

// get/get-all
program
  .command('ls')
  .description('Enumerate all lists')
  .action(function() {
    return store.all(printfmt(function(data) {
      return data.map(function(x) { return x.address; }).join('\n');
    }));
  });

program
  .command('cat [address]')
  .description('Retrieve list metadata.')
  .action(function(address, args) {
    return store.get(address, print({
      formatter: function(result) { return result.members.join(','); }
    }))
  });

// create
program
  .command('mk <address> <member1,member2,...>')
  .description('Creates a list address@listzz.com with the specified members')
  .action(function(address, members) {
    members = members.split(',');
    return store.create(address, { members: members }, print());
  });

// remove
program
  .command('rm <address>')
  .description('Deletes a list')
  .action(function(address) {
    var addresses = [];
    process.argv.forEach(function(a) { addresses.push(a); });
    addresses.shift();
    addresses.shift();
    addresses.shift();
    async.forEachSeries(addresses, function(address, cb) {
      logger.info('removing:', address);
      return store.remove(address, print(cb));
    }, function() {
      logger.info('done (all)');
    });
  });

// remove-all
program
  .command('reset')
  .description('Resets storage: deletes all lists (add --confirm)')
  .option('--confirm', 'Required when resetting the storage')
  .action(function(args) {
    if (args.confirm !== undefined) {
      logger.error('--confirm is required');
      return;
    }

    return store.clear(print());
  });

// load
program
  .command('load <file>')
  .description('Loads lists via a JSON file')
  .option('--reset', 'Resets the storage before loading lists')
  .action(function(file, args) {
    return fs.readFile(file, function(err, data) {
      var p = JSON.parse(data);
      return async.forEachSeries(Object.keys(p), function(address, cb) {
        var metadata = p[address];
        return store.create(address, metadata, function(err) {
          return cb(); // ignore errors
        });
      }, print());
    });
  });

program
  .usage('[command]')
  .parse(process.argv);

// -- private

function printfmt(formatter, callback) {
  return print( { formatter: formatter }, callback);
}

/** 
 * used as callback, prints arguments
 */
function print(options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options = options || {};
  var formatter = options.formatter || function(data) { return JSON.stringify(data, true, 2); };

  if (!callback) callback = function() {};

  return function(err) {
    if (!err) {
      var something = false;
      for (var i = 1; i < arguments.length; ++i) {
        console.info(formatter(arguments[i]));
        something = true;
      }

      if (!something) {
        console.info('done');
      }

      return callback();
    }
  }
}